version: "3.9"
networks:
  hash-crack-dev:
    driver: bridge
services:
  manager:
    container_name: hash-crack-manager
    build: 
      context: .
      dockerfile: Manager/Dockerfile
    environment:
      WORKER_HOSTNAME_PREFIX: md5-distributed-bruteforce-worker-
      WORKER_COUNT: 3
      ASPNETCORE_ENVIRONMENT: Development
    ports:
      - "8080:8080"
    networks:
     - hash-crack-dev
    depends_on:
      rabbitmq:
        condition: service_healthy
  worker:
    build:
      context: .
      dockerfile: Worker/Dockerfile
    networks:
     - hash-crack-dev
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 3
      endpoint_mode: vip
    environment:
      MANAGER_HOSTNAME: hash-crack-manager
      ASPNETCORE_ENVIRONMENT: Development
  rabbitmq:
    container_name: "hash-crack-rabbitmq"
    image: masstransit/rabbitmq:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      # "test: rabbitmq-diagnostics check_port_connectivity" does not work with masstransit/rabbitmq
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - hash-crack-dev
  mongo1:
    container_name: mongo1
    image: mongo
    volumes:
      - ./rs-init.sh:/scripts/rs-init.sh
    networks:
      - hash-crack-dev
    ports:
      - 27017:27017
      - 27021:27017
    links:
      - mongo2
      - mongo3
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
  mongo2:
    container_name: mongo2
    image: mongo
    networks:
      - hash-crack-dev
    ports:
       - 27022:27017
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]
  mongo3:
    container_name: mongo3
    image: mongo
    networks:
      - hash-crack-dev
    ports:
        - 27023:27017
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "dbrs" ]